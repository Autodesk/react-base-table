{"componentChunkName":"component---src-templates-example-js","path":"/examples/custom-cell","webpackCompilationHash":"e297a141c3327ad6ce29","result":{"data":{"rawCode":{"content":"const dataGenerator = () => ({\n  id: faker.random.uuid(),\n  name: faker.name.findName(),\n  gender: faker.random.boolean() ? 'male' : 'female',\n  score: {\n    math: faker.random.number(70) + 30,\n  },\n  birthday: faker.date.between(1995, 2005),\n  attachments: faker.random.number(5),\n  description: faker.lorem.sentence(),\n  email: faker.internet.email(),\n  country: faker.address.country(),\n  address: {\n    street: faker.address.streetAddress(),\n    city: faker.address.city(),\n    zipCode: faker.address.zipCode(),\n  },\n})\n\nconst GenderContainer = styled.div`\n  background-color: ${props =>\n    props.gender === 'male' ? 'lightblue' : 'pink'};\n  color: white;\n  border-radius: 3px;\n  width: 20px;\n  height: 20px;\n  font-size: 16px;\n  font-weight: bold;\n  line-height: 20px;\n  text-align: center;\n`\n\nconst Gender = ({ gender }) => (\n  <GenderContainer gender={gender}>\n    {gender === 'male' ? '♂' : '♀'}\n  </GenderContainer>\n)\n\nconst Score = styled.span`\n  color: ${props => (props.score >= 60 ? 'green' : 'red')};\n`\n\nconst Attachment = styled.div`\n  background-color: lightgray;\n  width: 20px;\n  height: 20px;\n  line-height: 20px;\n  text-align: center;\n  border-radius: 4px;\n  color: gray;\n`\n\nconst defaultData = new Array(5000)\n  .fill(0)\n  .map(dataGenerator)\n  .sort((a, b) => (a.name > b.name ? 1 : -1))\n\nconst defaultSort = { key: 'name', order: SortOrder.ASC }\n\nexport default class App extends React.Component {\n  state = {\n    data: defaultData,\n    sortBy: defaultSort,\n  }\n\n  columns = [\n    {\n      key: 'name',\n      title: 'Name',\n      dataKey: 'name',\n      width: 150,\n      resizable: true,\n      sortable: true,\n      frozen: Column.FrozenDirection.LEFT,\n    },\n    {\n      key: 'score',\n      title: 'Score',\n      dataKey: 'score.math',\n      width: 60,\n      align: Column.Alignment.CENTER,\n      sortable: false,\n      cellRenderer: ({ cellData: score }) => <Score score={score}>{score}</Score>,\n    },\n    {\n      key: 'gender',\n      title: '♂♀',\n      dataKey: 'gender',\n      cellRenderer: ({ cellData: gender }) => <Gender gender={gender} />,\n      width: 60,\n      align: Column.Alignment.CENTER,\n      sortable: true,\n    },\n    {\n      key: 'birthday',\n      title: 'Birthday',\n      dataKey: 'birthday',\n      dataGetter: ({ column, rowData }) =>\n        rowData[column.dataKey].toLocaleDateString(),\n      width: 100,\n      align: Column.Alignment.RIGHT,\n      sortable: true,\n    },\n    {\n      key: 'attachments',\n      title: 'Attachments',\n      dataKey: 'attachments',\n      width: 60,\n      align: Column.Alignment.CENTER,\n      headerRenderer: () => <Attachment>?</Attachment>,\n      cellRenderer: ({ cellData }) => <Attachment>{cellData}</Attachment>,\n    },\n    {\n      key: 'description',\n      title: 'Description',\n      dataKey: 'description',\n      width: 200,\n      resizable: true,\n      sortable: true,\n      cellRenderer: ({ cellData }) => <ReactTexty>{cellData}</ReactTexty>,\n    },\n    {\n      key: 'email',\n      title: 'Email',\n      dataKey: 'email',\n      width: 200,\n      resizable: true,\n      sortable: true,\n    },\n    {\n      key: 'country',\n      title: 'Country',\n      dataKey: 'country',\n      width: 100,\n      resizable: true,\n      sortable: true,\n    },\n    {\n      key: 'address',\n      title: 'Address',\n      dataKey: 'address.street',\n      width: 200,\n      resizable: true,\n    },\n    {\n      key: 'action',\n      width: 100,\n      align: Column.Alignment.CENTER,\n      frozen: Column.FrozenDirection.RIGHT,\n      cellRenderer: ({ rowData }) => (\n        <button\n          onClick={() => {\n            this.setState({\n              data: this.state.data.filter(x => x.id !== rowData.id),\n            })\n          }}\n        >\n          Remove\n        </button>\n      ),\n    },\n  ]\n\n  onColumnSort = sortBy => {\n    const order = sortBy.order === SortOrder.ASC ? 1 : -1\n    const data = [...this.state.data]\n    data.sort((a, b) => (a[sortBy.key] > b[sortBy.key] ? order : -order))\n    this.setState({\n      sortBy,\n      data,\n    })\n  }\n\n  render() {\n    const { data, sortBy } = this.state\n    return (\n      <Table\n        fixed\n        columns={this.columns}\n        data={data}\n        sortBy={sortBy}\n        onColumnSort={this.onColumnSort}\n      />\n    )\n  }\n}\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"name":"custom-cell"}}}