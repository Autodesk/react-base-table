{"componentChunkName":"component---src-templates-example-js","path":"/examples/inline-editing","webpackCompilationHash":"60891c1d7b14f843b520","result":{"data":{"rawCode":{"content":"// import { Overlay } from 'react-overlays'\nconst { Overlay } = ReactOverlays\n\nconst CellContainer = styled.div`\n  display: flex;\n  flex: 1 0 100%;\n  align-items: center;\n  height: 100%;\n  overflow: hidden;\n  margin: 0 -5px;\n  padding: 5px;\n  border: 1px dashed transparent;\n`\n\nconst GlobalStyle = createGlobalStyle`\n  .BaseTable__row:hover,\n  .BaseTable__row--hover {\n    ${CellContainer} {\n      border: 1px dashed #ccc;\n    }\n  }\n`\n\nconst Select = styled.select`\n  width: 100%;\n  height: 30px;\n  margin-top: 10px;\n`\n\nclass EditableCell extends React.PureComponent {\n  state = {\n    value: this.props.cellData,\n    editing: false,\n  }\n\n  setTargetRef = ref => (this.targetRef = ref)\n\n  getTargetRef = () => this.targetRef\n\n  handleClick = () => this.setState({ editing: true })\n\n  handleHide = () => this.setState({ editing: false })\n\n  handleChange = e =>\n    this.setState({\n      value: e.target.value,\n      editing: false,\n    })\n\n  render() {\n    const { container, rowIndex, columnIndex } = this.props\n    const { value, editing } = this.state\n\n    return (\n      <CellContainer ref={this.setTargetRef} onClick={this.handleClick}>\n        {!editing && value}\n        {editing && this.targetRef && (\n          <Overlay\n            show\n            flip\n            rootClose\n            container={container}\n            target={this.getTargetRef}\n            onHide={this.handleHide}\n          >\n            {({ props, placement }) => (\n              <div\n                {...props}\n                style={{\n                  ...props.style,\n                  width: this.targetRef.offsetWidth,\n                  top:\n                    placement === 'top'\n                      ? this.targetRef.offsetHeight\n                      : -this.targetRef.offsetHeight,\n                }}\n              >\n                <Select value={value} onChange={this.handleChange}>\n                  <option value=\"grapefruit\">Grapefruit</option>\n                  <option value=\"lime\">Lime</option>\n                  <option value=\"coconut\">Coconut</option>\n                  <option value=\"mango\">Mango</option>\n                </Select>\n              </div>\n            )}\n          </Overlay>\n        )}\n      </CellContainer>\n    )\n  }\n}\n\nconst columns = generateColumns(5)\nconst data = generateData(columns, 100)\n\ncolumns[0].cellRenderer = EditableCell\ncolumns[0].width = 300\n\nexport default () => (\n  <>\n    <GlobalStyle />\n    <Table fixed columns={columns} data={data} />\n  </>\n)\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"name":"inline-editing"}}}