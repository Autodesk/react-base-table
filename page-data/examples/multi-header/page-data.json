{"componentChunkName":"component---src-templates-example-js","path":"/examples/multi-header","webpackCompilationHash":"60891c1d7b14f843b520","result":{"data":{"rawCode":{"content":"const columns = generateColumns(15)\nconst data = generateData(columns, 200)\n\nconst GroupCell = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n\n  &:not(:last-child) {\n    border-right: 1px solid lightgray;\n  }\n`\n\nconst fixedColumns = columns.map((column, columnIndex) => {\n  let frozen\n  if (columnIndex < 3) frozen = Column.FrozenDirection.LEFT\n  if (columnIndex > 12) frozen = Column.FrozenDirection.RIGHT\n  return { ...column, frozen, width: 100 }\n})\n\nconst headerRenderer = ({ cells, columns, headerIndex }) => {\n  if (headerIndex === 2) return cells\n\n  const groupCells = []\n  let width = 0\n  let idx = 0\n\n  columns.forEach((column, columnIndex) => {\n    // if there are frozen columns, there will be some placeholders for the frozen cells\n    if (column[Table.PlaceholderKey]) groupCells.push(cells[columnIndex])\n    else {\n      width += cells[columnIndex].props.style.width\n      idx++\n\n      const nextColumn = columns[columnIndex + 1]\n      if (\n        columnIndex === columns.length - 1 ||\n        nextColumn[Table.PlaceholderKey] ||\n        idx === (headerIndex === 0 ? 4 : 2)\n      ) {\n        groupCells.push(\n          <GroupCell\n            key={`header-group-cell-${column.key}`}\n            style={{ ...cells[columnIndex].props.style, width }}\n          >\n            Group width {width}\n          </GroupCell>\n        )\n        width = 0\n        idx = 0\n      }\n    }\n  })\n  return groupCells\n}\n\nexport default () => (\n  <Table\n    fixed\n    columns={fixedColumns}\n    data={data}\n    headerHeight={[30, 40, 50]}\n    headerRenderer={headerRenderer}\n  />\n)\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"name":"multi-header"}}}