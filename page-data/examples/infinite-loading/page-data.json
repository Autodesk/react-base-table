{"componentChunkName":"component---src-templates-example-js","path":"/examples/infinite-loading","webpackCompilationHash":"60891c1d7b14f843b520","result":{"data":{"rawCode":{"content":"const TOTAL_SIZE = 1005\nconst PAGE_SIZE = 50\n\nconst columns = generateColumns(10)\nconst DATA = generateData(columns, TOTAL_SIZE)\n\nconst fixedColumns = columns.map((column, columnIndex) => {\n  let frozen\n  if (columnIndex < 2) frozen = Column.FrozenDirection.LEFT\n  if (columnIndex > 8) frozen = Column.FrozenDirection.RIGHT\n  return { ...column, frozen }\n})\n\nconst Empty = styled.div`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nconst rotate = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n`\n\nconst Loader = styled.div`\n  display: inline-block;\n  border-radius: 100%;\n  margin: 2px;\n  border: 2px solid #0696d7;\n  border-bottom-color: transparent;\n  margin: 2px;\n  width: ${props => (props.small ? 12 : 22)}px;\n  height: ${props => (props.small ? 12 : 22)}px;\n  animation: ${rotate} 0.75s linear infinite;\n`\n\nconst LoadingLayer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: rgba(255, 255, 255, 0.3);\n  margin: 0;\n  width: 100%;\n  height: 100%;\n`\n\nconst LoadingMoreLayer = styled.div`\n  pointer-events: none;\n  background: rgba(32, 60, 94, 0.3);\n  position: absolute;\n  bottom: 30px;\n  left: 50%;\n  transform: translateX(-50%);\n  padding: 5px 15px;\n  border-radius: 10px;\n  display: flex;\n  align-items: center;\n`\n\nconst LoadingMoreText = styled.span`\n  color: #fff;\n  margin-right: 5px;\n`\n\nconst Toolbar = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 10px;\n`\n\nconst Footer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n`\n\nexport default class App extends React.Component {\n  state = {\n    data: [],\n    loading: true,\n    loadingMore: false,\n    loadedAll: false,\n  }\n\n  fetchData(offset = 0, limit = PAGE_SIZE) {\n    return delay(3000).then(() => {\n      return DATA.slice(offset, offset + limit)\n    })\n  }\n\n  loadData() {\n    this.fetchData(0, Math.random() < 0.2 ? 0 : PAGE_SIZE).then(data => {\n      if (!this._isMount) return\n      this.setState({\n        data,\n        loading: false,\n        loadedAll: data.length < PAGE_SIZE,\n      })\n    })\n  }\n\n  loadMore() {\n    this.setState({ loadingMore: true })\n    this.fetchData(this.state.data.length).then(data => {\n      if (!this._isMount) return\n      this.setState({\n        data: [...this.state.data, ...data],\n        loadingMore: false,\n        loadedAll: data.length < PAGE_SIZE,\n      })\n    })\n  }\n\n  handleEndReached = args => {\n    action('onEndReached')(args)\n    const { loading, loadingMore, loadedAll } = this.state\n    if (loading || loadingMore || loadedAll) return\n    this.loadMore()\n  }\n\n  handleReload = () => {\n    this.setState({\n      data: [],\n      loading: true,\n    })\n    this.loadData()\n  }\n\n  renderEmpty = () => {\n    if (this.state.loading) return null\n    return <Empty>No data available</Empty>\n  }\n\n  renderOverlay = () => {\n    const { loading, loadingMore } = this.state\n\n    if (loadingMore)\n      return (\n        <LoadingMoreLayer>\n          <LoadingMoreText>Loading More</LoadingMoreText>\n          <Loader small />\n        </LoadingMoreLayer>\n      )\n    if (loading)\n      return (\n        <LoadingLayer>\n          <Loader />\n        </LoadingLayer>\n      )\n\n    return null\n  }\n\n  componentDidMount() {\n    this._isMount = true\n    this.loadData()\n  }\n\n  componentWillUnmount() {\n    this._isMount = false\n  }\n\n  render() {\n    const { data, loading, loadingMore, loadedAll } = this.state\n    return (\n      <>\n        <Toolbar>\n          <span>Loaded data length: {data.length}</span>\n          <span>All data loaded: {loadedAll.toString()}</span>\n          <button onClick={this.handleReload}>Regenerate</button>\n        </Toolbar>\n        <Table\n          fixed\n          columns={fixedColumns}\n          data={data}\n          disabled={loading}\n          loadingMore={loadingMore}\n          onEndReachedThreshold={300}\n          onEndReached={this.handleEndReached}\n          overlayRenderer={this.renderOverlay}\n          emptyRenderer={this.renderEmpty}\n        />\n      </>\n    )\n  }\n}\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"name":"infinite-loading"}}}