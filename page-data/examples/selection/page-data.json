{"componentChunkName":"component---src-templates-example-js","path":"/examples/selection","webpackCompilationHash":"60891c1d7b14f843b520","result":{"data":{"rawCode":{"content":"const StyledTable = styled(BaseTable)`\n  .row-selected {\n    background-color: #e3e3e3;\n  }\n`\n\nclass SelectionCell extends React.PureComponent {\n  _handleChange = e => {\n    const { rowData, rowIndex, column } = this.props\n    const { onChange } = column\n\n    onChange({ selected: e.target.checked, rowData, rowIndex })\n  }\n\n  render() {\n    const { rowData, column } = this.props\n    const { selectedRowKeys, rowKey } = column\n    const checked = selectedRowKeys.includes(rowData[rowKey])\n\n    return (\n      <input type=\"checkbox\" checked={checked} onChange={this._handleChange} />\n    )\n  }\n}\n\nclass SelectableTable extends React.PureComponent {\n  constructor(props) {\n    super(props)\n\n    const {\n      selectedRowKeys,\n      defaultSelectedRowKeys,\n      expandedRowKeys,\n      defaultExpandedRowKeys,\n    } = props\n    this.state = {\n      selectedRowKeys:\n        (selectedRowKeys !== undefined\n          ? selectedRowKeys\n          : defaultSelectedRowKeys) || [],\n      expandedRowKeys:\n        (expandedRowKeys !== undefined\n          ? expandedRowKeys\n          : defaultExpandedRowKeys) || [],\n    }\n  }\n\n  /**\n   * Set `selectedRowKeys` manually.\n   * This method is available only if `selectedRowKeys` is uncontrolled.\n   *\n   * @param {array} selectedRowKeys\n   */\n  setSelectedRowKeys(selectedRowKeys) {\n    // if `selectedRowKeys` is controlled\n    if (this.props.selectedRowKeys !== undefined) return\n\n    this.setState({\n      selectedRowKeys: cloneArray(selectedRowKeys),\n    })\n  }\n\n  /**\n   * See BaseTable#setExpandedRowKeys\n   */\n  setExpandedRowKeys(expandedRowKeys) {\n    // if `expandedRowKeys` is controlled\n    if (this.props.expandedRowKeys !== undefined) return\n\n    this.setState({\n      expandedRowKeys: cloneArray(expandedRowKeys),\n    })\n  }\n\n  /* some other custom methods and proxy methods */\n\n  /**\n   * Remove rowKeys from inner state  manually, it's useful to purge dirty state after rows removed.\n   * This method is available only if `selectedRowKeys` or `expandedRowKeys` is uncontrolled.\n   *\n   * @param {array} rowKeys\n   */\n  removeRowKeysFromState(rowKeys) {\n    if (!Array.isArray(rowKeys)) return\n\n    const state = {}\n    if (\n      this.props.selectedRowKeys === undefined &&\n      this.state.selectedRowKeys.length > 0\n    ) {\n      state.selectedRowKeys = this.state.selectedRowKeys.filter(\n        key => !rowKeys.includes(key)\n      )\n    }\n    if (\n      this.props.expandedRowKeys === undefined &&\n      this.state.expandedRowKeys.length > 0\n    ) {\n      state.expandedRowKeys = this.state.expandedRowKeys.filter(\n        key => !rowKeys.includes(key)\n      )\n    }\n    if (state.selectedRowKeys || state.expandedRowKeys) {\n      this.setState(state)\n    }\n  }\n\n  _handleSelectChange = ({ selected, rowData, rowIndex }) => {\n    const selectedRowKeys = [...this.state.selectedRowKeys]\n    const key = rowData[this.props.rowKey]\n\n    if (selected) {\n      if (!selectedRowKeys.includes(key)) selectedRowKeys.push(key)\n    } else {\n      const index = selectedRowKeys.indexOf(key)\n      if (index > -1) {\n        selectedRowKeys.splice(index, 1)\n      }\n    }\n\n    // if `selectedRowKeys` is uncontrolled, update internal state\n    if (this.props.selectedRowKeys === undefined) {\n      this.setState({ selectedRowKeys })\n    }\n    this.props.onRowSelect({ selected, rowData, rowIndex })\n    this.props.onSelectedRowsChange(selectedRowKeys)\n  }\n\n  _rowClassName = ({ rowData, rowIndex }) => {\n    const { rowClassName, rowKey } = this.props\n    const { selectedRowKeys } = this.state\n\n    const rowClass = rowClassName\n      ? callOrReturn(rowClassName, { rowData, rowIndex })\n      : ''\n    const key = rowData[rowKey]\n\n    return [rowClass, selectedRowKeys.includes(key) && 'row-selected']\n      .filter(Boolean)\n      .concat(' ')\n  }\n\n  render() {\n    const {\n      columns,\n      children,\n      selectable,\n      selectionColumnProps,\n      ...rest\n    } = this.props\n    const { selectedRowKeys } = this.state\n\n    // you'd better memoize this operation\n    let _columns = columns || normalizeColumns(children)\n    if (selectable) {\n      const selectionColumn = {\n        width: 40,\n        flexShrink: 0,\n        resizable: false,\n        frozen: Column.FrozenDirection.LEFT,\n        cellRenderer: SelectionCell,\n        ...selectionColumnProps,\n        key: '__selection__',\n        rowKey: this.props.rowKey,\n        selectedRowKeys: selectedRowKeys,\n        onChange: this._handleSelectChange,\n      }\n      _columns = [selectionColumn, ..._columns]\n    }\n\n    return (\n      <StyledTable\n        {...rest}\n        columns={_columns}\n        rowClassName={this._rowClassName}\n      />\n    )\n  }\n}\n\nSelectableTable.defaultProps = {\n  ...BaseTable.defaultProps,\n  onRowSelect: noop,\n  onSelectedRowsChange: noop,\n}\n\n// Use case\nconst columns = generateColumns(10)\nconst data = generateData(columns, 200)\n\nexport default () => (\n  <SelectableTable\n    width={700}\n    height={400}\n    selectable\n    columns={columns}\n    data={data}\n    onRowSelect={action('onRowSelect')}\n    onSelectedRowsChange={action('onSelectedRowsChange')}\n  />\n)\n"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"name":"selection"}}}